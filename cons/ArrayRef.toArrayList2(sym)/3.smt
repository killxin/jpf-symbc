;Data Structure
(declare-datatypes (T) (
    (MySet (mk-pair (mapping (Array T Bool))))
    (MyList (mk-pair (mapping (Array T Bool)) (element (Seq T))))
    (MyIterator (mk-pair (mapping (Array T Bool)) (previous (Array T Bool))))
    (MyListIterator (mk-pair (position Int) (element (Seq T))))
))
(declare-datatypes (K V) (
    (MyEntry (mk-pair (key K) (value V)))
    (MyMap (mk-pair (key (Array K Bool)) (mapping (Array K V))))
))
(declare-datatypes () (
    (FileInputStream (mk-pair (length Int) (readPosition Int) (isOpen Bool)))
))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -10) 0 (ite (= true (select a!1 x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-fun List@378_7_SYMOBJECT () (MyList Int))
(declare-fun List@378_2_SYMOBJECT () (MyList Int))
(declare-fun List@378_3_SYMOBJECT () (MyList Int))
(declare-fun List@378_12_SYMOBJECT () (MyList Int))
(declare-fun array_1_SYMARRAY () (MyList Int))
(declare-fun length_4_SYMINT () Int)
(declare-fun ret_6_SYMINT () Int)
(declare-fun ret_8_SYMINT () Int)
(declare-fun length_9_SYMINT () Int)
(declare-fun ret_11_SYMINT () Int)
(declare-fun ret_13_SYMINT () Int)
(declare-fun length_14_SYMINT () Int)
(assert (and 
(>= length_14_SYMINT (- 2147483648))
(<= length_14_SYMINT 2147483647)
(>= 2 length_14_SYMINT)
(>= length_9_SYMINT (- 2147483648))
(<= length_9_SYMINT 2147483647)
(< 1 length_9_SYMINT)
(>= length_4_SYMINT (- 2147483648))
(<= length_4_SYMINT 2147483647)
(< 0 length_4_SYMINT)
(let ((a!1 (=> (> length_14_SYMINT 0)
               (> (s!ze (mapping array_1_SYMARRAY) 10) 0))))
  (and (= length_14_SYMINT (seq.len (element array_1_SYMARRAY)))
       (>= length_14_SYMINT (s!ze (mapping array_1_SYMARRAY) 10))
       a!1))
(>= ret_11_SYMINT (- 2147483648))
(<= ret_11_SYMINT 2147483647)
(>= ret_13_SYMINT 0)
(<= ret_13_SYMINT 1)
(= ret_13_SYMINT 1)
(= (element List@378_12_SYMOBJECT)
   (seq.++ (element List@378_7_SYMOBJECT) (seq.unit ret_11_SYMINT)))
(= (mapping List@378_12_SYMOBJECT)
   (store (mapping List@378_7_SYMOBJECT) ret_11_SYMINT true))
(and (>= 1 0)
     (< 1 (seq.len (element array_1_SYMARRAY)))
     (= (seq.unit ret_11_SYMINT) (seq.at (element array_1_SYMARRAY) 1)))
(let ((a!1 (=> (> length_9_SYMINT 0) (> (s!ze (mapping array_1_SYMARRAY) 10) 0))))
  (and (= length_9_SYMINT (seq.len (element array_1_SYMARRAY)))
       (>= length_9_SYMINT (s!ze (mapping array_1_SYMARRAY) 10))
       a!1))
(>= ret_6_SYMINT (- 2147483648))
(<= ret_6_SYMINT 2147483647)
(>= ret_8_SYMINT 0)
(<= ret_8_SYMINT 1)
(= ret_8_SYMINT 1)
(= (element List@378_7_SYMOBJECT)
   (seq.++ (element List@378_3_SYMOBJECT) (seq.unit ret_6_SYMINT)))
(= (mapping List@378_7_SYMOBJECT)
   (store (mapping List@378_3_SYMOBJECT) ret_6_SYMINT true))
(and (>= 0 0)
     (< 0 (seq.len (element array_1_SYMARRAY)))
     (= (seq.unit ret_6_SYMINT) (seq.at (element array_1_SYMARRAY) 0)))
(let ((a!1 (=> (> length_4_SYMINT 0) (> (s!ze (mapping array_1_SYMARRAY) 10) 0))))
  (and (= length_4_SYMINT (seq.len (element array_1_SYMARRAY)))
       (>= length_4_SYMINT (s!ze (mapping array_1_SYMARRAY) 10))
       a!1))
(let ((a!1 (forall ((x Int))
             (= (select (mapping List@378_3_SYMOBJECT) x) false))))
  (and (= (seq.len (element List@378_3_SYMOBJECT)) 0) a!1))
))
;
(declare-const retMain_15_SYMOBJECT (MyList Int))
(assert (= retMain_15_SYMOBJECT List@378_12_SYMOBJECT))
;(define-fun List@378_3_SYMOBJECT () List_Int
;  (List_Int (lambda ((x!1 Int)) false) (as seq.empty (Seq Int))))
;(define-fun length_14_SYMINT () Int
;  2)
;(define-fun ret_8_SYMINT () Int
;  1)
;(define-fun List@378_7_SYMOBJECT () List_Int
;  (List_Int (lambda ((x!1 Int)) (= x!1 (- 2147483367))) (seq.unit (- 2147483367))))
;(define-fun length_4_SYMINT () Int
;  2)
;(define-fun length_9_SYMINT () Int
;  2)
;(define-fun array_1_SYMARRAY () List_Int
;  (List_Int (lambda ((x!1 Int))
;            (or (= x!1 6)
;                (= x!1 (- 3))
;                (= x!1 59)
;                (= x!1 (- 2147483113))
;                (= x!1 (- 11))))
;          (seq.++ (seq.unit (- 2147483367)) (seq.unit (- 2147483113)))))
;(define-fun ret_13_SYMINT () Int
;  1)
;(define-fun ret_11_SYMINT () Int
;  (- 2147483113))
;(define-fun ret_6_SYMINT () Int
;  (- 2147483367))
;(define-fun List@378_12_SYMOBJECT () List_Int
;  (List_Int (lambda ((x!1 Int))
;            (or (= x!1 (- 2147483113)) (= x!1 (- 2147483367))))
;          (seq.++ (seq.unit (- 2147483367)) (seq.unit (- 2147483113)))))
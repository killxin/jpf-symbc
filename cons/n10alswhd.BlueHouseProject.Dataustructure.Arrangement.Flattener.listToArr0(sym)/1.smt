;Data Structure
(declare-datatypes (T) (
    (MySet (mk-pair (mapping (Array T Bool))))
    (MyList (mk-pair (mapping (Array T Bool)) (element (Seq T))))
    (MyIterator (mk-pair (mapping (Array T Bool)) (previous (Array T Bool))))
    (MyListIterator (mk-pair (position Int) (element (Seq T))))
))
(declare-datatypes (K V) (
    (MyEntry (mk-pair (key K) (value V)))
    (MyMap (mk-pair (key (Array K Bool)) (mapping (Array K V))))
))
(declare-datatypes () (
    (FileInputStream (mk-pair (length Int) (readPosition Int) (isOpen Bool)))
))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -10) 0 (ite (= true (select a!1 x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-fun ret@Array_4_SYMARRAY () (MyList Int))
(declare-fun Array@1803_3_SYMOBJECT () (MyList Int))
(declare-fun list_1_SYMOBJECT () (MyList Int))
(declare-fun ret_2_SYMINT () Int)
(assert (and 
(and (= (element ret@Array_4_SYMARRAY) (element list_1_SYMOBJECT))
     (= (mapping ret@Array_4_SYMARRAY) (mapping list_1_SYMOBJECT)))
(let ((a!1 (forall ((x Int))
             (= (select (mapping Array@1803_3_SYMOBJECT) x) false))))
  (and (= (seq.len (element Array@1803_3_SYMOBJECT)) 20) a!1))
(>= ret_2_SYMINT (- 2147483648))
(<= ret_2_SYMINT 2147483647)
(let ((a!1 (=> (> ret_2_SYMINT 0) (> (s!ze (mapping list_1_SYMOBJECT) 10) 0))))
  (and (= ret_2_SYMINT (seq.len (element list_1_SYMOBJECT)))
       (>= ret_2_SYMINT (s!ze (mapping list_1_SYMOBJECT) 10))
       a!1))
))
;
(declare-const retMain_5_SYMOBJECT (MyList Int))
(assert (= retMain_5_SYMOBJECT Array@1803_3_SYMOBJECT))
;(define-fun ret@Array_4_SYMARRAY () List_Int
;  (let ((a!1 (lambda ((x!1 Int))
;             (and (not (= x!1 (- 8)))
;                  (not (= x!1 2))
;                  (not (= x!1 (- 10)))
;                  (not (= x!1 9))
;                  (not (= x!1 (- 5))))))
;      (a!2 (seq.++ (seq.unit 91)
;                   (seq.++ (seq.unit 93) (seq.++ (seq.unit 95) (seq.unit 97))))))
;(let ((a!3 (seq.++ (seq.unit 85)
;                   (seq.++ (seq.unit 87) (seq.++ (seq.unit 89) a!2)))))
;(let ((a!4 (seq.++ (seq.unit 79)
;                   (seq.++ (seq.unit 81) (seq.++ (seq.unit 83) a!3)))))
;(let ((a!5 (seq.++ (seq.unit 73)
;                   (seq.++ (seq.unit 75) (seq.++ (seq.unit 77) a!4)))))
;(let ((a!6 (seq.++ (seq.unit 67)
;                   (seq.++ (seq.unit 70) (seq.++ (seq.unit 71) a!5)))))
;  (List_Int a!1 a!6)))))))
;(define-fun Array@1803_3_SYMOBJECT () List_Int
;  (let ((a!1 (seq.++ (seq.unit 62)
;                   (seq.++ (seq.unit 63) (seq.++ (seq.unit 64) (seq.unit 65))))))
;(let ((a!2 (seq.++ (seq.unit 59)
;                   (seq.++ (seq.unit 60) (seq.++ (seq.unit 61) a!1)))))
;(let ((a!3 (seq.++ (seq.unit 56)
;                   (seq.++ (seq.unit 57) (seq.++ (seq.unit 58) a!2)))))
;(let ((a!4 (seq.++ (seq.unit 53)
;                   (seq.++ (seq.unit 54) (seq.++ (seq.unit 55) a!3)))))
;(let ((a!5 (seq.++ (seq.unit 50)
;                   (seq.++ (seq.unit 51) (seq.++ (seq.unit 52) a!4)))))
;(let ((a!6 (seq.++ (seq.unit 47)
;                   (seq.++ (seq.unit 48) (seq.++ (seq.unit 49) a!5)))))
;  (List_Int (lambda ((x!1 Int)) false) (seq.++ (seq.unit 46) a!6)))))))))
;(define-fun list_1_SYMOBJECT () List_Int
;  (let ((a!1 (lambda ((x!1 Int))
;             (and (not (= x!1 (- 8)))
;                  (not (= x!1 2))
;                  (not (= x!1 (- 10)))
;                  (not (= x!1 9))
;                  (not (= x!1 (- 5))))))
;      (a!2 (seq.++ (seq.unit 91)
;                   (seq.++ (seq.unit 93) (seq.++ (seq.unit 95) (seq.unit 97))))))
;(let ((a!3 (seq.++ (seq.unit 85)
;                   (seq.++ (seq.unit 87) (seq.++ (seq.unit 89) a!2)))))
;(let ((a!4 (seq.++ (seq.unit 79)
;                   (seq.++ (seq.unit 81) (seq.++ (seq.unit 83) a!3)))))
;(let ((a!5 (seq.++ (seq.unit 73)
;                   (seq.++ (seq.unit 75) (seq.++ (seq.unit 77) a!4)))))
;(let ((a!6 (seq.++ (seq.unit 67)
;                   (seq.++ (seq.unit 70) (seq.++ (seq.unit 71) a!5)))))
;  (List_Int a!1 a!6)))))))
;(define-fun ret_2_SYMINT () Int
;  16)